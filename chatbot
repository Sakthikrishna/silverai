<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Silver AI</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .chat-container {
            height: calc(100vh - 130px);
        }
        .messages-container {
            height: calc(100% - 60px);
        }
        .auth-container {
            height: calc(100vh - 80px);
        }
        @media (max-width: 640px) {
            .chat-container {
                height: calc(100vh - 110px);
            }
        }
        .typing-indicator::after {
            content: "...";
            animation: typing 1.5s infinite;
            display: inline-block;
            width: 0;
        }
        @keyframes typing {
            0% { width: 0; }
            50% { width: 0.75em; }
            100% { width: 0; }
        }
    </style>
</head>
<body class="bg-gray-100 font-sans">
    <!-- App Container -->
    <div class="max-w-6xl mx-auto">
        <!-- Header -->
        <header class="bg-indigo-600 text-white p-4 shadow-md">
            <div class="container mx-auto flex justify-between items-center">
                <h1 class="text-2xl font-bold">Silver AI</h1>
                <div id="auth-buttons" class="flex space-x-2">
                    <button id="sign-in-btn" class="px-4 py-2 bg-white text-indigo-600 rounded-md hover:bg-gray-100 transition">Sign In</button>
                    <button id="sign-up-btn" class="px-4 py-2 bg-indigo-500 text-white rounded-md hover:bg-indigo-700 transition">Sign Up</button>
                </div>
                <div id="user-profile" class="hidden items-center space-x-2">
                    <span id="user-email" class="font-medium"></span>
                    <button id="sign-out-btn" class="px-3 py-1 bg-white text-indigo-600 rounded-md text-sm hover:bg-gray-100 transition">Sign Out</button>
                </div>
            </div>
        </header>

        <!-- Authentication Modal -->
        <div id="auth-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
            <div class="bg-white rounded-lg shadow-xl w-full max-w-md">
                <div class="p-6">
                    <div class="flex justify-between items-center mb-4">
                        <h2 id="auth-modal-title" class="text-xl font-bold text-gray-800">Sign In</h2>
                        <button id="close-auth-modal" class="text-gray-500 hover:text-gray-700">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    
                    <div class="auth-container flex flex-col justify-center">
                        <form id="auth-form" class="space-y-4">
                            <div>
                                <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                                <input type="email" id="email" required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                            </div>
                            <div id="password-field">
                                <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
                                <input type="password" id="password" required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                            </div>
                            <div id="confirm-password-field" class="hidden">
                                <label for="confirm-password" class="block text-sm font-medium text-gray-700">Confirm Password</label>
                                <input type="password" id="confirm-password" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                            </div>
                            <div id="auth-error" class="text-red-500 text-sm hidden"></div>
                            <button type="submit" id="auth-submit-btn" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                Sign In
                            </button>
                        </form>
                        <div id="toggle-auth-mode" class="mt-4 text-center text-sm text-gray-600">
                            Don't have an account? <button class="text-indigo-600 hover:text-indigo-800 font-medium">Sign Up</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <main id="app-content" class="hidden">
            <div class="container mx-auto p-4">
                <div class="flex flex-col md:flex-row gap-4">
                    <!-- Chat List Sidebar -->
                    <div class="w-full md:w-1/3 bg-white rounded-lg shadow-md p-4">
                        <div class="flex justify-between items-center mb-4">
                            <h2 class="text-lg font-semibold text-gray-800">Your Chats</h2>
                            <button id="new-chat-btn" class="p-2 bg-indigo-100 text-indigo-600 rounded-full hover:bg-indigo-200 transition">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                        <div id="chat-list" class="space-y-2">
                            <!-- Chats will be loaded here -->
                            <div class="p-3 rounded-lg bg-gray-100 animate-pulse">
                                <div class="h-4 bg-gray-300 rounded w-3/4"></div>
                                <div class="h-3 bg-gray-300 rounded w-1/2 mt-2"></div>
                            </div>
                            <div class="p-3 rounded-lg bg-gray-100 animate-pulse">
                                <div class="h-4 bg-gray-300 rounded w-2/3"></div>
                                <div class="h-3 bg-gray-300 rounded w-1/3 mt-2"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Chat Container -->
                    <div class="w-full md:w-2/3 bg-white rounded-lg shadow-md overflow-hidden">
                        <div id="empty-chat" class="chat-container flex items-center justify-center">
                            <div class="text-center p-6">
                                <i class="fas fa-comments text-4xl text-gray-300 mb-4"></i>
                                <h3 class="text-xl font-medium text-gray-500">Select a chat or start a new one</h3>
                                <button id="new-chat-btn-2" class="mt-4 px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition">New Chat</button>
                            </div>
                        </div>

                        <div id="chat-container" class="chat-container hidden flex-col">
                            <!-- Chat Header -->
                            <div class="p-4 border-b border-gray-200 flex justify-between items-center">
                                <h3 id="chat-title" class="text-lg font-medium text-gray-800">Chat Title</h3>
                                <div class="flex space-x-2">
                                    <button id="delete-chat-btn" class="p-2 text-gray-500 hover:text-red-500 transition">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>

                            <!-- Messages Container -->
                            <div class="messages-container overflow-y-auto p-4 space-y-4">
                                <!-- Messages will be loaded here -->
                                <div class="flex justify-start">
                                    <div class="max-w-xs md:max-w-md lg:max-w-lg bg-indigo-100 text-gray-800 p-3 rounded-lg rounded-tl-none">
                                        <p>Hello! I'm your AI assistant. How can I help you today?</p>
                                        <p class="text-xs text-gray-500 mt-1">Just now</p>
                                    </div>
                                </div>
                            </div>

                            <!-- Message Input -->
                            <div class="p-4 border-t border-gray-200">
                                <form id="message-form" class="flex gap-2">
                                    <input type="text" id="message-input" placeholder="Type your message..." class="flex-1 px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                                    <button type="submit" class="p-2 bg-indigo-600 text-white rounded-full hover:bg-indigo-700 transition">
                                        <i class="fas fa-paper-plane"></i>
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
        // DOM Elements
        const authButtons = document.getElementById('auth-buttons');
        const userProfile = document.getElementById('user-profile');
        const userEmail = document.getElementById('user-email');
        const signInBtn = document.getElementById('sign-in-btn');
        const signUpBtn = document.getElementById('sign-up-btn');
        const signOutBtn = document.getElementById('sign-out-btn');
        const authModal = document.getElementById('auth-modal');
        const authModalTitle = document.getElementById('auth-modal-title');
        const authForm = document.getElementById('auth-form');
        const passwordField = document.getElementById('password-field');
        const confirmPasswordField = document.getElementById('confirm-password-field');
        const authSubmitBtn = document.getElementById('auth-submit-btn');
        const authError = document.getElementById('auth-error');
        const toggleAuthMode = document.getElementById('toggle-auth-mode');
        const closeAuthModal = document.getElementById('close-auth-modal');
        const appContent = document.getElementById('app-content');
        const chatList = document.getElementById('chat-list');
        const emptyChat = document.getElementById('empty-chat');
        const chatContainer = document.getElementById('chat-container');
        const messagesContainer = document.querySelector('#chat-container .messages-container');
        const messageForm = document.getElementById('message-form');
        const messageInput = document.getElementById('message-input');
        const chatTitle = document.getElementById('chat-title');
        const newChatBtn = document.getElementById('new-chat-btn');
        const newChatBtn2 = document.getElementById('new-chat-btn-2');
        const deleteChatBtn = document.getElementById('delete-chat-btn');

        // State
        let currentUser = null;
        let currentChatId = null;
        let isSignUpMode = false;

        // Mock data for demonstration
        const mockChats = [
            { id: '1', title: 'Getting started with AI', lastMessage: 'How do I use this chatbot?', updatedAt: '2023-05-15T10:30:00' },
            { id: '2', title: 'Technical support', lastMessage: 'I need help with my account', updatedAt: '2023-05-14T15:45:00' },
            { id: '3', title: 'General questions', lastMessage: 'What can you help me with?', updatedAt: '2023-05-10T09:15:00' }
        ];

        const mockMessages = {
            '1': [
                { id: '101', sender: 'ai', content: 'Hello! I\'m your AI assistant. How can I help you today?', createdAt: '2023-05-15T10:30:00' },
                { id: '102', sender: 'user', content: 'How do I use this chatbot?', createdAt: '2023-05-15T10:31:00' },
                { id: '103', sender: 'ai', content: 'You can ask me anything! I can help with information, suggestions, or just chat.', createdAt: '2023-05-15T10:31:30' }
            ],
            '2': [
                { id: '201', sender: 'ai', content: 'Hello! I\'m your AI assistant. How can I help you today?', createdAt: '2023-05-14T15:45:00' },
                { id: '202', sender: 'user', content: 'I need help with my account', createdAt: '2023-05-14T15:46:00' },
                { id: '203', sender: 'ai', content: 'Sure! What specific issue are you facing with your account?', createdAt: '2023-05-14T15:46:30' }
            ],
            '3': [
                { id: '301', sender: 'ai', content: 'Hello! I\'m your AI assistant. How can I help you today?', createdAt: '2023-05-10T09:15:00' },
                { id: '302', sender: 'user', content: 'What can you help me with?', createdAt: '2023-05-10T09:16:00' },
                { id: '303', sender: 'ai', content: 'I can answer questions, provide information, help with learning, and much more!', createdAt: '2023-05-10T09:16:30' }
            ]
        };

        // Event Listeners
        signInBtn.addEventListener('click', () => {
            isSignUpMode = false;
            showAuthModal('Sign In');
        });

        signUpBtn.addEventListener('click', () => {
            isSignUpMode = true;
            showAuthModal('Sign Up');
        });

        signOutBtn.addEventListener('click', signOut);

        closeAuthModal.addEventListener('click', () => {
            authModal.classList.add('hidden');
        });

        toggleAuthMode.addEventListener('click', () => {
            isSignUpMode = !isSignUpMode;
            showAuthModal(isSignUpMode ? 'Sign Up' : 'Sign In');
        });

        authForm.addEventListener('submit', handleAuthSubmit);

        newChatBtn.addEventListener('click', createNewChat);
        newChatBtn2.addEventListener('click', createNewChat);
        deleteChatBtn.addEventListener('click', deleteCurrentChat);

        messageForm.addEventListener('submit', sendMessage);

        // Functions
        function showAuthModal(title) {
            authModalTitle.textContent = title;
            authSubmitBtn.textContent = title;
            
            if (isSignUpMode) {
                confirmPasswordField.classList.remove('hidden');
                toggleAuthMode.innerHTML = 'Already have an account? <button class="text-indigo-600 hover:text-indigo-800 font-medium">Sign In</button>';
            } else {
                confirmPasswordField.classList.add('hidden');
                toggleAuthMode.innerHTML = 'Don\'t have an account? <button class="text-indigo-600 hover:text-indigo-800 font-medium">Sign Up</button>';
            }
            
            authError.classList.add('hidden');
            authModal.classList.remove('hidden');
        }

        function handleAuthSubmit(e) {
            e.preventDefault();
            
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            const confirmPassword = isSignUpMode ? document.getElementById('confirm-password').value : null;
            
            // Simple validation
            if (isSignUpMode && password !== confirmPassword) {
                authError.textContent = 'Passwords do not match';
                authError.classList.remove('hidden');
                return;
            }
            
            // Mock authentication
            setTimeout(() => {
                authError.classList.add('hidden');
                authModal.classList.add('hidden');
                
                // For demo purposes, we'll just set the current user
                currentUser = { email };
                updateUIAfterAuth();
                
                // Load mock chats
                loadChats();
            }, 1000);
        }

        function signOut() {
            currentUser = null;
            currentChatId = null;
            
            authButtons.classList.remove('hidden');
            userProfile.classList.add('hidden');
            appContent.classList.add('hidden');
            
            // Reset form fields
            authForm.reset();
        }

        function updateUIAfterAuth() {
            authButtons.classList.add('hidden');
            userProfile.classList.remove('hidden');
            appContent.classList.remove('hidden');
            
            userEmail.textContent = currentUser.email;
        }

        function loadChats() {
            // Clear loading state
            chatList.innerHTML = '';
            
            if (mockChats.length === 0) {
                chatList.innerHTML = '<p class="text-gray-500 text-center py-4">No chats yet. Start a new conversation!</p>';
                return;
            }
            
            mockChats.forEach(chat => {
                const chatElement = document.createElement('div');
                chatElement.className = `p-3 rounded-lg cursor-pointer hover:bg-gray-100 transition ${currentChatId === chat.id ? 'bg-indigo-50 border border-indigo-200' : ''}`;
                chatElement.innerHTML = `
                    <h4 class="font-medium text-gray-800 truncate">${chat.title}</h4>
                    <p class="text-sm text-gray-500 truncate">${chat.lastMessage}</p>
                    <p class="text-xs text-gray-400 mt-1">${formatDate(chat.updatedAt)}</p>
                `;
                
                chatElement.addEventListener('click', () => loadChat(chat.id));
                chatList.appendChild(chatElement);
            });
        }

        function loadChat(chatId) {
            currentChatId = chatId;
            
            // Update chat list UI
            document.querySelectorAll('#chat-list > div').forEach(el => {
                el.classList.remove('bg-indigo-50', 'border', 'border-indigo-200');
                if (el.getAttribute('data-chat-id') === chatId) {
                    el.classList.add('bg-indigo-50', 'border', 'border-indigo-200');
                }
            });
            
            // Show chat container
            emptyChat.classList.add('hidden');
            chatContainer.classList.remove('hidden');
            
            // Set chat title
            const chat = mockChats.find(c => c.id === chatId);
            chatTitle.textContent = chat.title;
            
            // Load messages
            loadMessages(chatId);
            
            // Highlight selected chat in list
            loadChats();
        }

        function loadMessages(chatId) {
            messagesContainer.innerHTML = '';
            
            const messages = mockMessages[chatId] || [];
            
            messages.forEach(message => {
                const messageElement = document.createElement('div');
                messageElement.className = `flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`;
                
                messageElement.innerHTML = `
                    <div class="max-w-xs md:max-w-md lg:max-w-lg ${message.sender === 'user' ? 'bg-indigo-600 text-white' : 'bg-indigo-100 text-gray-800'} p-3 rounded-lg ${message.sender === 'user' ? 'rounded-br-none' : 'rounded-tl-none'}">
                        <p>${message.content}</p>
                        <p class="text-xs ${message.sender === 'user' ? 'text-indigo-200' : 'text-gray-500'} mt-1">${formatTime(message.createdAt)}</p>
                    </div>
                `;
                
                messagesContainer.appendChild(messageElement);
            });
            
            // Scroll to bottom
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function createNewChat() {
            // In a real app, this would call a GraphQL mutation to create a new chat
            const newChatId = 'new-' + Date.now();
            const newChat = {
                id: newChatId,
                title: 'New Chat',
                lastMessage: '',
                updatedAt: new Date().toISOString()
            };
            
            mockChats.unshift(newChat);
            mockMessages[newChatId] = [
                { id: 'new-1', sender: 'ai', content: 'Hello! I\'m your AI assistant. How can I help you today?', createdAt: new Date().toISOString() }
            ];
            
            loadChats();
            loadChat(newChatId);
        }

        function deleteCurrentChat() {
            if (!currentChatId) return;
            
            if (confirm('Are you sure you want to delete this chat?')) {
                // In a real app, this would call a GraphQL mutation to delete the chat
                const index = mockChats.findIndex(c => c.id === currentChatId);
                if (index !== -1) {
                    mockChats.splice(index, 1);
                    delete mockMessages[currentChatId];
                    
                    currentChatId = null;
                    loadChats();
                    
                    emptyChat.classList.remove('hidden');
                    chatContainer.classList.add('hidden');
                }
            }
        }

        function sendMessage(e) {
            e.preventDefault();
            
            const content = messageInput.value.trim();
            if (!content || !currentChatId) return;
            
            // Add user message to UI immediately
            const userMessage = {
                id: 'temp-' + Date.now(),
                sender: 'user',
                content,
                createdAt: new Date().toISOString()
            };
            
            addMessageToUI(userMessage);
            messageInput.value = '';
            
            // In a real app, this would:
            // 1. Call a GraphQL mutation to save the message
            // 2. Call a Hasura Action to trigger the chatbot
            // 3. Receive the response via subscription
            
            // For demo, we'll simulate the AI response
            setTimeout(() => {
                // Show typing indicator
                const typingIndicator = document.createElement('div');
                typingIndicator.className = 'flex justify-start';
                typingIndicator.innerHTML = `
                    <div class="bg-indigo-100 text-gray-800 p-3 rounded-lg rounded-tl-none">
                        <p class="typing-indicator">AI is typing</p>
                    </div>
                `;
                messagesContainer.appendChild(typingIndicator);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
                
                // Simulate AI thinking
                setTimeout(() => {
                    // Remove typing indicator
                    messagesContainer.removeChild(typingIndicator);
                    
                    // Add AI response
                    const aiResponse = {
                        id: 'ai-' + Date.now(),
                        sender: 'ai',
                        content: getAIResponse(content),
                        createdAt: new Date().toISOString()
                    };
                    
                    addMessageToUI(aiResponse);
                    
                    // Update chat list with last message
                    const chat = mockChats.find(c => c.id === currentChatId);
                    if (chat) {
                        chat.lastMessage = content;
                        chat.updatedAt = new Date().toISOString();
                        loadChats();
                    }
                }, 1500);
            }, 500);
        }

        function addMessageToUI(message) {
            const messageElement = document.createElement('div');
            messageElement.className = `flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`;
            
            messageElement.innerHTML = `
                <div class="max-w-xs md:max-w-md lg:max-w-lg ${message.sender === 'user' ? 'bg-indigo-600 text-white' : 'bg-indigo-100 text-gray-800'} p-3 rounded-lg ${message.sender === 'user' ? 'rounded-br-none' : 'rounded-tl-none'}">
                    <p>${message.content}</p>
                    <p class="text-xs ${message.sender === 'user' ? 'text-indigo-200' : 'text-gray-500'} mt-1">${formatTime(message.createdAt)}</p>
                </div>
            `;
            
            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // Helper functions
        function formatDate(isoString) {
            const date = new Date(isoString);
            const now = new Date();
            
            if (date.toDateString() === now.toDateString()) {
                return 'Today';
            }
            
            const yesterday = new Date(now);
            yesterday.setDate(yesterday.getDate() - 1);
            if (date.toDateString() === yesterday.toDateString()) {
                return 'Yesterday';
            }
            
            return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
        }

        function formatTime(isoString) {
            const date = new Date(isoString);
            return date.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' });
        }

        function getAIResponse(userMessage) {
            // Simple mock responses
            const responses = [
                "I understand you're asking about " + userMessage + ". Can you provide more details?",
                "That's an interesting question about " + userMessage + ". Here's what I know...",
                "I can help with that! " + userMessage + " is something I'm familiar with.",
                "Regarding " + userMessage + ", I'd recommend checking the documentation for more information.",
                "Thanks for your message! I'm processing your question about " + userMessage + "."
            ];
            
            return responses[Math.floor(Math.random() * responses.length)];
        }

        // Initialize
        if (currentUser) {
            updateUIAfterAuth();
            loadChats();
        }
    </script>
</body>
</html>
